{
  "swagger": "2.0",
  "info": {
    "version": "V2",
    "title": "REST API"
  },
  "host": "sp.auth.adobe.com",
  "basePath": "/api/v2",
  "tags": [
    {
      "name": "2. Sessions",
      "description": "Create authentication sessions"
    },
    {
      "name": "6. Partner Single Sign-On",
      "description": "Handle partner authentication"
    },
    {
      "name": "5. Logout",
      "description": "Delete authenticated profiles"
    },
    {
      "name": "3. Profiles",
      "description": "Obtain information about authenticated profiles"
    },
    {
      "name": "1. Configuration",
      "description": "Retrieve the configuration associated with the Service Provider"
    },
    {
      "name": "4. Decisions",
      "description": "Obtain informative/authoritative decisions"
    }
  ],
  "paths": {
    "/authenticate/{serviceProvider}/{code}": {
      "get": {
        "tags": [
          "2. Sessions"
        ],
        "summary": "Perform authentication in user agent",
        "operationId": "startAuthenticationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The authentication code obtained after creating the authentication session on the streaming device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "302": {
            "description": "Found. The response body contains a location redirect to continue the flow until reaching the MVPD login page"
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/configuration": {
      "get": {
        "tags": [
          "1. Configuration"
        ],
        "summary": "Retrieve configuration for specific service provider",
        "operationId": "handleRequestUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profile",
            "in": "query",
            "description": "-",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains a list of MVPDs having an active integration with the 'serviceProvider'.",
            "schema": {
              "$ref": "#/definitions/ConfigurationResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/decisions/authorize/{mvpd}": {
      "post": {
        "tags": [
          "4. Decisions"
        ],
        "summary": "Retrieve authorization decisions using specific MVPD",
        "operationId": "retrieveAuthorizeDecisionsForMvpdUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mvpd",
            "in": "path",
            "description": "The internal unique identifier associated with the Identity Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resources",
            "description": "The list of resources that require an MVPD decision before they can be played.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Adobe-Subject-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Platform Identity method is described in the [Adobe-Subject-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-adobe-subject-token) documentation.\n\nFor more details about single sign-on enabled flows using a platform identity, refer to the [Single sign-on using platform identity flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AD-Service-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Service Token method is described in the [AD-Service-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ad-service-token) documentation.\n\nFor more details about single sign-on enabled flows using a service token, refer to the [Single sign-on using service token flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Partner-Framework-Status",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Partner method is described in the [AP-Partner-Framework-Status](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-partner-framework-status) documentation.\n\nFor more details about single sign-on enabled flows using a partner, refer to the [Single sign-on using partner flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Temppass-Identity",
            "in": "header",
            "description": "The generation of the user unique identifier payload is described in the [AP-TempPass-Identity](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-temppass-identity) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains a list of decisions with additional information.",
            "schema": {
              "$ref": "#/definitions/DecisionsResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/decisions/preauthorize/{mvpd}": {
      "post": {
        "tags": [
          "4. Decisions"
        ],
        "summary": "Retrieve preauthorization decisions using specific MVPD",
        "operationId": "retrievePreAuthorizeDecisionsForMvpdUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mvpd",
            "in": "path",
            "description": "The internal unique identifier associated with the Identity Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resources",
            "description": "The list of resources that require an MVPD decision before they can be played.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Adobe-Subject-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Platform Identity method is described in the [Adobe-Subject-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-adobe-subject-token) documentation.\n\nFor more details about single sign-on enabled flows using a platform identity, refer to the [Single sign-on using platform identity flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AD-Service-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Service Token method is described in the [AD-Service-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ad-service-token) documentation.\n\nFor more details about single sign-on enabled flows using a service token, refer to the [Single sign-on using service token flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Partner-Framework-Status",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Partner method is described in the [AP-Partner-Framework-Status](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-partner-framework-status) documentation.\n\nFor more details about single sign-on enabled flows using a partner, refer to the [Single sign-on using partner flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Temppass-Identity",
            "in": "header",
            "description": "The generation of the user unique identifier payload is described in the [AP-TempPass-Identity](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-temppass-identity) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains a list of decisions with additional information.",
            "schema": {
              "$ref": "#/definitions/DecisionsResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/logout/{mvpd}": {
      "get": {
        "tags": [
          "5. Logout"
        ],
        "summary": "Initiate logout for specific MVPD",
        "operationId": "getLogoutForMvpdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mvpd",
            "in": "path",
            "description": "The internal unique identifier associated with the Identity Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "The final redirect URL to which the user agent navigates when the logout flow for the MVPD is completed.\n\nThe value must be URL-encoded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Adobe-Subject-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Platform Identity method is described in the [Adobe-Subject-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-adobe-subject-token) documentation.\n\nFor more details about single sign-on enabled flows using a platform identity, refer to the [Single sign-on using platform identity flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AD-Service-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Service Token method is described in the [AD-Service-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ad-service-token) documentation.\n\nFor more details about single sign-on enabled flows using a service token, refer to the [Single sign-on using service token flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains a list of actions the client must perform in order to complete the logout flow for each deleted profile.",
            "schema": {
              "$ref": "#/definitions/LogoutResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "302": {
            "description": "Found. The response body contains a location redirect to continue the flow until reaching the MVPD login page"
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/profiles": {
      "get": {
        "tags": [
          "3. Profiles"
        ],
        "summary": "Retrieve profiles",
        "operationId": "getProfilesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Adobe-Subject-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Platform Identity method is described in the [Adobe-Subject-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-adobe-subject-token) documentation.\n\nFor more details about single sign-on enabled flows using a platform identity, refer to the [Single sign-on using platform identity flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AD-Service-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Service Token method is described in the [AD-Service-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ad-service-token) documentation.\n\nFor more details about single sign-on enabled flows using a service token, refer to the [Single sign-on using service token flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Partner-Framework-Status",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Partner method is described in the [AP-Partner-Framework-Status](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-partner-framework-status) documentation.\n\nFor more details about single sign-on enabled flows using a partner, refer to the [Single sign-on using partner flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains a map of valid profiles, which may be empty.",
            "schema": {
              "$ref": "#/definitions/ProfilesResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/profiles/code/{code}": {
      "get": {
        "tags": [
          "3. Profiles"
        ],
        "summary": "Retrieve profiles for specific code",
        "operationId": "getProfileForCodeUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The authentication code obtained after creating the authentication session on the streaming device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains a map of valid profiles, which may be empty.",
            "schema": {
              "$ref": "#/definitions/ProfilesResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/profiles/sso/{partner}": {
      "post": {
        "tags": [
          "6. Partner Single Sign-On"
        ],
        "summary": "Retrieve profile using partner authentication response",
        "operationId": "createPartnerProfileUsingPOST",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partner",
            "in": "path",
            "description": "The name of the partner (e.g., Apple) that provides the single sign-on framework integrated with Adobe Pass Authentication flows.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "SAMLResponse",
            "description": "The partner authentication response that contains the needed user metadata to create and save a partner profile.\n\nThe value must be Base64-encoded and afterward URL-encoded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/x-www-form-urlencoded.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Partner-Framework-Status",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Partner method is described in the [AP-Partner-Framework-Status](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-partner-framework-status) documentation.\n\nFor more details about single sign-on enabled flows using a partner, refer to the [Single sign-on using partner flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains a map of valid profiles, which may be empty.",
            "schema": {
              "$ref": "#/definitions/ProfilesResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/profiles/{mvpd}": {
      "get": {
        "tags": [
          "3. Profiles"
        ],
        "summary": "Retrieve profiles for specific MVPD",
        "operationId": "getProfileForMvpdUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mvpd",
            "in": "path",
            "description": "The internal unique identifier associated with the Identity Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Adobe-Subject-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Platform Identity method is described in the [Adobe-Subject-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-adobe-subject-token) documentation.\n\nFor more details about single sign-on enabled flows using a platform identity, refer to the [Single sign-on using platform identity flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AD-Service-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Service Token method is described in the [AD-Service-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ad-service-token) documentation.\n\nFor more details about single sign-on enabled flows using a service token, refer to the [Single sign-on using service token flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Partner-Framework-Status",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Partner method is described in the [AP-Partner-Framework-Status](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-partner-framework-status) documentation.\n\nFor more details about single sign-on enabled flows using a partner, refer to the [Single sign-on using partner flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Temppass-Identity",
            "in": "header",
            "description": "The generation of the user unique identifier payload is described in the [AP-TempPass-Identity](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-temppass-identity) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains a map of valid profiles, which may be empty.",
            "schema": {
              "$ref": "#/definitions/ProfilesResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/sessions": {
      "post": {
        "tags": [
          "2. Sessions"
        ],
        "summary": "Create authentication session",
        "operationId": "createSessionUsingPOST",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mvpd",
            "in": "formData",
            "description": "The internal unique identifier associated with the Identity Provider during onboarding process.\n\nIf the streaming device platform has limitations in providing a value, then an application will have to resume the authentication session and provide a valid value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "formData",
            "description": "The originating domain of the application performing MVPD login.\n\nIf the streaming device platform has limitations in providing a value, then an application will have to resume the authentication session and provide a valid value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUrl",
            "in": "formData",
            "description": "The final redirect URL to which the user agent navigates when the authentication flow for the MVPD is completed.\n\nThe value must be URL-encoded.\n\nIf the streaming device platform has limitations in providing a value, then an application will have to resume the authentication session and provide a valid value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/x-www-form-urlencoded.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Adobe-Subject-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Platform Identity method is described in the [Adobe-Subject-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-adobe-subject-token) documentation.\n\nFor more details about single sign-on enabled flows using a platform identity, refer to the [Single sign-on using platform identity flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "AD-Service-Token",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Service Token method is described in the [AD-Service-Token](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ad-service-token) documentation.\n\nFor more details about single sign-on enabled flows using a service token, refer to the [Single sign-on using service token flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains information about the next actions to perform authentication.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/sessions/sso/{partner}": {
      "post": {
        "tags": [
          "6. Partner Single Sign-On"
        ],
        "summary": "Retrieve partner authentication request",
        "operationId": "retrieveVerificationTokenUsingPOST",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partner",
            "in": "path",
            "description": "The name of the partner (e.g., Apple) that provides the single sign-on framework integrated with Adobe Pass Authentication flows.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "formData",
            "description": "The originating domain of the application performing MVPD login.\n\nIf the streaming device platform has limitations in providing a value, then an application will have to resume the authentication session and provide a valid value.",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirectUrl",
            "in": "formData",
            "description": "The final redirect URL to which the user agent navigates when the authentication flow for the MVPD is completed.\n\nThe value must be URL-encoded.\n\nIf the streaming device platform has limitations in providing a value, then an application will have to resume the authentication session and provide a valid value.",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/x-www-form-urlencoded.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AP-Device-Identifier",
            "in": "header",
            "description": "The generation of the device identifier payload is described in the [AP-Device-Identifier](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-device-identifier) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Device-Info",
            "in": "header",
            "description": "The generation of the device information payload is described in the [X-Device-Info](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-x-device-info) header documentation.\n\nIt is strongly recommended to always use it when the application's device platform allows for the explicit provision of valid values.\n\nWhen provided, the Adobe Pass Authentication backend will merge explicitly set values with extracted values implicitly (by default).\n\nWhen not provided, the Adobe Pass Authentication backend will use extracted values implicitly (by default).",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "AP-Partner-Framework-Status",
            "in": "header",
            "description": "The generation of the single sign-on payload for the Partner method is described in the [AP-Partner-Framework-Status](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-ap-partner-framework-status) documentation.\n\nFor more details about single sign-on enabled flows using a partner, refer to the [Single sign-on using partner flows](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-flows/rest-api-v2-single-sign-on-access-flows/rest-api-v2-single-sign-on-service-token-flows) documentation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains information about the next actions to perform authentication.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    },
    "/{serviceProvider}/sessions/{code}": {
      "get": {
        "tags": [
          "2. Sessions"
        ],
        "summary": "Retrieve authentication session using code",
        "operationId": "getSessionStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The authentication code obtained after creating the authentication session on the streaming device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains information about the authentication session.",
            "schema": {
              "$ref": "#/definitions/SessionStatusResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      },
      "post": {
        "tags": [
          "2. Sessions"
        ],
        "summary": "Resume authentication session",
        "operationId": "resumeSessionUsingPOST",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The authentication code obtained after creating the authentication session on the streaming device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "mvpd",
            "in": "formData",
            "description": "The internal unique identifier associated with the Identity Provider during onboarding process.\n\nIf the streaming device platform has limitations in providing a value, then an application will have to resume the authentication session and provide a valid value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "formData",
            "description": "The originating domain of the application performing MVPD login.\n\nIf the streaming device platform has limitations in providing a value, then an application will have to resume the authentication session and provide a valid value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUrl",
            "in": "formData",
            "description": "The final redirect URL to which the user agent navigates when the authentication flow for the MVPD is completed.\n\nThe value must be URL-encoded.\n\nIf the streaming device platform has limitations in providing a value, then an application will have to resume the authentication session and provide a valid value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProvider",
            "in": "path",
            "description": "The internal unique identifier associated with the Service Provider during onboarding process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The generation of the bearer token payload is described in the [Authorization](https://experienceleague.adobe.com/en/docs/pass/authentication/programmer-integration-guide/rest-api-v2/rest-api-v2-appendix/rest-api-v2-appendix-headers/rest-api-v2-appendix-headers-authorization) header documentation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/x-www-form-urlencoded.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "The IP address of the streaming device.\n\nIt is strongly recommended to always use it for server to server implementations, particularly when the call is made by the programmer service rather than the streaming device.\n\nFor client to server implementations, the IP address of the streaming device is sent implicitly",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The media type accepted by the client application.\n\nIf specified, it must be application/json.",
            "required": false,
            "type": "string"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "The user agent of the client application.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The response body contains information about the next actions to perform authentication.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Bad request. The request is invalid, the client needs to correct the request and try again. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "401": {
            "description": "Unauthorized. The access token is invalid, the client needs to obtain a new access token and try again. For more details refer to the [[Dynamic Client Registration](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/dcr-api/dynamic-client-registration-overview) documentation."
          },
          "500": {
            "description": "Internal Server Error. The server side encountered an issue. The response body may contain error information that adheres to the [Enhanced Error Codes](https://experienceleague.adobe.com/en/docs/pass/authentication/auth-features/error-reportn/enhanced-error-codes) documentation."
          },
          "405": {
            "description": "Method not allowed. The HTTP method is invalid, the client needs to use an HTTP method that is permitted for the requested resource and try again. For more details refer to the Request section."
          }
        }
      }
    }
  },
  "definitions": {
    "MediaTokenResponse": {
      "type": "object",
      "properties": {
        "notAfter": {
          "type": "integer",
          "format": "int64"
        },
        "notBefore": {
          "type": "integer",
          "format": "int64"
        },
        "serializedToken": {
          "type": "string"
        }
      }
    },
    "ProfilesResponse": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MvpdProfileResponse"
          }
        }
      }
    },
    "ConfigurationResponse": {
      "type": "object",
      "properties": {
        "os": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "platformCategory": {
          "type": "string"
        },
        "requestor": {
          "$ref": "#/definitions/ProgrammerType"
        },
        "sdkType": {
          "type": "string"
        }
      }
    },
    "DecisionResponse": {
      "type": "object",
      "properties": {
        "authorized": {
          "type": "boolean",
          "example": false,
          "description": "The authorization decision for the resource. Can be either true or false."
        },
        "error": {
          "description": "If the decision is \"false\" the error object contains additional information about the Deny decision according to the error information.",
          "$ref": "#/definitions/ErrorInformation"
        },
        "mvpd": {
          "type": "string",
          "description": "The internal unique identifier associated with an Identity Provider during on-boarding process."
        },
        "notAfter": {
          "type": "integer",
          "format": "int64"
        },
        "notBefore": {
          "type": "integer",
          "format": "int64"
        },
        "resource": {
          "type": "string",
          "description": "The resource identifier for which the authorize decision is returned."
        },
        "serviceProvider": {
          "type": "string",
          "description": "The internal unique identifier associated with a Service Provider during on-boarding process."
        },
        "source": {
          "type": "string",
          "description": "Information about decision source: degradation, temppass, mvpd or dummy."
        },
        "token": {
          "description": "Information about media token: issuedAt, notBefore, notAfter and serializedToken.",
          "$ref": "#/definitions/MediaTokenResponse"
        }
      },
      "description": "Response object for decision requests"
    },
    "Message": {
      "type": "object"
    },
    "LogoutResponse": {
      "type": "object",
      "properties": {
        "logouts": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MvpdLogoutResponse"
          }
        }
      }
    },
    "DecisionsResponse": {
      "type": "object",
      "properties": {
        "decisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DecisionResponse"
          }
        }
      }
    },
    "SessionStatusResponse": {
      "type": "object",
      "properties": {
        "existing": {
          "type": "object",
          "description": "The existing parameters that were already provided.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "missing": {
          "type": "array",
          "description": "The existing parameters that were already provided.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response object for session status requests"
    },
    "MvpdLogoutResponse": {
      "type": "object",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "The action to be performed in a user-agent."
        },
        "actionType": {
          "type": "string",
          "description": "The type of interaction the client application must perform in order to continue the flow with the action specified by the parameter \"actionName\"."
        },
        "mvpd": {
          "type": "string",
          "description": "The internal unique identifier associated with an Identity Provider during on-boarding process."
        },
        "url": {
          "type": "string",
          "description": "The logout URL used to perform logout flow with the MVPD endpoint. It is not present when: actionName=complete or actionName=invalid."
        }
      },
      "description": "Mvpd logout response"
    },
    "ErrorInformation": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "helpUrl": {
          "type": "string"
        },
        "message": {
          "$ref": "#/definitions/Message"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "trace": {
          "type": "string"
        }
      }
    },
    "ProgrammerType": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "string"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "id": {
          "type": "string"
        },
        "mvpds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MvpdType"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MvpdType": {
      "type": "object",
      "properties": {
        "authPerAggregator": {
          "type": "boolean"
        },
        "authPerBrowserSession": {
          "type": "boolean"
        },
        "boardingStatus": {
          "type": "string"
        },
        "displayInPlatformPicker": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "enablePlatformServices": {
          "type": "boolean"
        },
        "enforcePlatformPermissions": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isProxy": {
          "type": "boolean"
        },
        "isTempPass": {
          "type": "boolean"
        },
        "logoUrl": {
          "type": "string"
        },
        "passiveAuthnEnabled": {
          "type": "boolean"
        },
        "platformMappingId": {
          "type": "string"
        }
      }
    },
    "UserMetadataResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "enum": [
            "missing_authentication_code",
            "authentication_session_invalidated",
            "authentication_session_missing",
            "preauthorization_authentication_session_missing",
            "authentication_session_expired",
            "preauthorization_authentication_session_expired",
            "authentication_session_issuer_mismatch",
            "unknown_integration",
            "invalid_device_id",
            "invalid_requestor",
            "invalid_redirect_url",
            "invalid_session",
            "missing_dcr_application",
            "missing_resource",
            "missing_resources",
            "invalid_device_info",
            "authorization_not_found",
            "authorization_expired",
            "malformed_authz_request",
            "authorization_denied_by_mvpd",
            "authorization_denied_by_degradation_rule",
            "authorization_denied_by_degradation_configuration_change",
            "authorization_denied_by_parental_controls",
            "authorization_denied_by_session_invalidated",
            "authorization_denied_by_hba_policies",
            "identity_not_recognized_by_mvpd",
            "network_received_error",
            "invalid_refresh_token",
            "preauthorization_denied_by_mvpd",
            "too_many_resources",
            "invalid_decision_resources",
            "invalid_mvpd",
            "network_connection_timeout",
            "maximum_execution_time_exceeded",
            "internal_error",
            "invalid_certificate",
            "need_to_reauthenticate",
            "temppass_invalid_identity",
            "temppass_expired",
            "temppass_max_resources_exceeded",
            "temppass_invalid_configuration",
            "registered_app_mismatch",
            "invalid_platformid",
            "invalid_platformtrait",
            "invalid_platformcategory_trait",
            "invalid_platform_configuration",
            "disabled_platform_services",
            "invalid_mvpd_platform_settings",
            "unsupported_mvpd_boarding_status",
            "invalid_profile_exchange_configuration",
            "invalid_sso_partner",
            "invalid_sso_partner_saml_response",
            "degraded_integration",
            "framework_permissions_not_present",
            "framework_permissions_not_determined",
            "framework_permissions_not_granted",
            "framework_mappingid_not_determined",
            "framework_mappingid_mismatch"
          ]
        },
        "state": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      }
    },
    "Domain": {
      "type": "object",
      "properties": {
        "mvpdInitiated": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SessionResponse": {
      "type": "object",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "The action that primary device need to perform in order to complete authentication flow."
        },
        "actionType": {
          "type": "string",
          "description": "The type of interaction the client application must perform in order to continue the flow with the action specified by the parameter \"actionName\"."
        },
        "code": {
          "type": "string",
          "description": "The registration code that can be used on the secondary device to continue the authentication flow."
        },
        "missingParameters": {
          "type": "array",
          "description": "The missing parameters that need to be provided in order to complete the authentication flow.",
          "items": {
            "type": "string"
          }
        },
        "mvpd": {
          "type": "string",
          "description": "The id of the identity provider."
        },
        "serviceProvider": {
          "type": "string",
          "description": "The id of the service provider."
        },
        "sessionId": {
          "type": "string",
          "description": "The opaque identifier that can be used for tracking user activity."
        },
        "url": {
          "type": "string",
          "description": "The url where the application needs to navigate."
        }
      },
      "description": "Response object for session requests"
    },
    "MvpdProfileResponse": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "description": "The list of user metadata attributes. These attributes can be mandatory (userId) or non-mandatory (the rest of the user metadata fields like zip, householdId, maxRating, etc.).",
          "additionalProperties": {
            "$ref": "#/definitions/UserMetadataResponse"
          }
        },
        "issuer": {
          "type": "string",
          "description": "The entity that owns the authenticated profile."
        },
        "notAfter": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum timestamp for the authentication profile time-to-live (ttl)."
        },
        "notBefore": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum timestamp for the authentication profile time-to-live (ttl)."
        },
        "type": {
          "type": "string",
          "description": "The type of the authenticated profile."
        }
      },
      "description": "Mvpd profile response"
    }
  }
}